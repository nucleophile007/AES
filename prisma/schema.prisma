// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model WebinarRegistration {
  id           Int      @id @default(autoincrement())
  email        String
  parentName   String
  parentEmail  String
  parentPhone  String
  studentName  String
  grade        String
  schoolName   String
  program      String
  preferredTime String
  createdAt    DateTime @default(now())
  approved     Boolean  @default(false)
  // Track which admin approved this registration (null until approved)
  adminEmail   String?
}

model AvailabilityDay {
  id        Int      @id @default(autoincrement())
  // Store date as string in M/D/YYYY to match frontend calendar keys (e.g., "8/16/2025")
  date      String
  // Times are strings like "09:00 AM", "10:00 AM" (1-hour intervals)
  times     Json
  // Program this availability is for (e.g., "Mathematics Tutoring", "Science Tutoring")
  program   String
  // Admin email who created this availability
  adminEmail String @default("acharya.folsom@gmail.com")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Combination of date, program, and admin email should be unique
  @@unique([date, program, adminEmail])
}

model Teacher {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String   @default("temp123") // Add password for login
  programs  String[] // List of programs the teacher manages
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  students    TeacherStudent[]
  assignments Assignment[]
  resources   Resource[]
}

model Student {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String   @default("temp123") // Add password for login
  grade       String
  schoolName  String
  parentName  String
  parentEmail String
  parentPhone String
  program     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  submissions   Submission[]
  enrollments   Enrollment[]
  teacherLinks  TeacherStudent[]
  assignedResources StudentResource[]
  assignedAssignments Assignment[] @relation("AssignedAssignments") // Assignments specifically assigned to this student
}

model TeacherStudent {
  id         Int      @id @default(autoincrement())
  teacherId  Int
  studentId  Int
  program    String
  assignedAt DateTime @default(now())

  // Relations
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([teacherId, studentId, program])
}

model Assignment {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  instructions String?  // Detailed instructions
  program      String
  subject      String
  dueDate      DateTime
  totalPoints  Int      @default(100)
  isActive     Boolean  @default(true)
  allowLateSubmission Boolean @default(false)
  teacherId    Int      @default(1) // Teacher who created this assignment
  targetStudentId Int?  // Optional: specific student this assignment is for
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  teacher     Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  targetStudent Student?   @relation("AssignedAssignments", fields: [targetStudentId], references: [id], onDelete: SetNull)
  submissions Submission[]
  resources   AssignmentResource[]
}

model Submission {
  id             Int      @id @default(autoincrement())
  studentId      Int
  assignmentId   Int
  content        String?  // Text content
  fileUrl        String?  // File upload URL
  fileName       String?  // Original filename
  fileSize       Int?     // File size in bytes
  submittedAt    DateTime @default(now())
  updatedAt      DateTime @updatedAt @default(now())
  grade          Int?     // Points earned
  feedback       String?  // Teacher feedback
  status         String   @default("submitted") // submitted, graded, returned, resubmitted
  submissionNumber Int    @default(1) // Track resubmissions
  
  // Relations
  student     Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignment  Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, assignmentId])
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  studentId Int
  program   String
  subject   String
  startDate DateTime @default(now())
  isActive  Boolean  @default(true)
  
  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, program, subject])
}

// Resources that teachers can create and assign to students
model Resource {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  type        String   // "document", "video", "link", "image"
  fileUrl     String?  // File URL for uploaded resources
  linkUrl     String?  // External link URL
  fileName    String?  // Original filename if uploaded
  fileSize    Int?     // File size in bytes
  program     String
  subject     String
  grade       String
  teacherId   Int      // Teacher who created this resource
  isPublic    Boolean  @default(false) // If true, visible to all students in program
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  teacher           Teacher           @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  assignmentLinks   AssignmentResource[]
  studentAssignments StudentResource[]
}

// Link resources to specific assignments
model AssignmentResource {
  id           Int      @id @default(autoincrement())
  assignmentId Int
  resourceId   Int
  isRequired   Boolean  @default(false)
  
  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  resource   Resource   @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  
  @@unique([assignmentId, resourceId])
}

// Assign resources directly to specific students
model StudentResource {
  id         Int      @id @default(autoincrement())
  studentId  Int
  resourceId Int
  assignedAt DateTime @default(now())
  viewedAt   DateTime?
  
  // Relations
  student  Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, resourceId])
}
