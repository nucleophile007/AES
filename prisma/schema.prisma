// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model WebinarRegistration {
  id           Int      @id @default(autoincrement())
  email        String
  parentName   String
  parentEmail  String
  parentPhone  String
  studentName  String
  grade        String
  schoolName   String
  program      String
  preferredTime String
  createdAt    DateTime @default(now())
  approved     Boolean  @default(false)
}

model AvailabilityDay {
  id        Int      @id @default(autoincrement())
  // Store date as string in M/D/YYYY to match frontend calendar keys (e.g., "8/16/2025")
  date      String
  // Times are strings like "09:00 AM", "10:00 AM" (1-hour intervals)
  times     Json
  // Program this availability is for (e.g., "Mathematics Tutoring", "Science Tutoring")
  program   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Combination of date and program should be unique
  @@unique([date, program])
}

model Student {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  grade       String
  schoolName  String
  parentName  String
  parentEmail String
  parentPhone String
  program     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  submissions Submission[]
  enrollments Enrollment[]
}

model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  program     String
  subject     String
  grade       String
  dueDate     DateTime
  totalPoints Int      @default(100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  submissions Submission[]
}

model Submission {
  id            Int      @id @default(autoincrement())
  studentId     Int
  assignmentId  Int
  content       String?  // Text content
  fileUrl       String?  // File upload URL
  submittedAt   DateTime @default(now())
  grade         Int?     // Points earned
  feedback      String?  // Teacher feedback
  status        String   @default("submitted") // submitted, graded, returned
  
  // Relations
  student     Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignment  Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, assignmentId])
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  studentId Int
  program   String
  subject   String
  startDate DateTime @default(now())
  isActive  Boolean  @default(true)
  
  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, program, subject])
}
