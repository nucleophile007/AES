generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model WebinarRegistration {
  id            Int      @id @default(autoincrement())
  email         String
  parentName    String
  parentEmail   String
  parentPhone   String
  studentName   String
  grade         String
  schoolName    String
  program       String
  preferredTime String
  createdAt     DateTime @default(now())
  approved      Boolean  @default(false)
  adminEmail    String?
}

model AvailabilityDay {
  id         Int      @id @default(autoincrement())
  date       String
  times      Json
  program    String
  adminEmail String   @default("acharya.folsom@gmail.com")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([date, program, adminEmail])
}

model Teacher {
  id                Int                       @id @default(autoincrement())
  name              String
  email             String                    @unique
  password          String                    @default("temp123")
  programs          String[]
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  assignments       Assignment[]
  resources         Resource[]
  submissionRemarks StudentSubmissionRemark[]
  students          TeacherStudent[]
  classSchedules    ClassSchedule[]
}

model Student {
  id                  Int                 @id @default(autoincrement())
  name                String
  email               String              @unique
  password            String              @default("temp123")
  grade               String
  schoolName          String
  parentName          String
  parentEmail         String
  parentPhone         String
  program             String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  assignedAssignments Assignment[]        @relation("AssignedAssignments")
  enrollments         Enrollment[]
  assignedResources   StudentResource[]
  studentSubmissions  StudentSubmission[]
  submissions         Submission[]
  teacherLinks        TeacherStudent[]
  classSchedules      ClassSchedule[]
}

model TeacherStudent {
  id         Int      @id @default(autoincrement())
  teacherId  Int
  studentId  Int
  program    String
  assignedAt DateTime @default(now())
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher    Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, studentId, program])
}

model Assignment {
  id                  Int                  @id @default(autoincrement())
  title               String
  description         String
  instructions        String?
  program             String
  subject             String
  dueDate             DateTime
  totalPoints         Int                  @default(100)
  isActive            Boolean              @default(true)
  allowLateSubmission Boolean              @default(false)
  teacherId           Int                  @default(1)
  targetStudentId     Int?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  targetStudent       Student?             @relation("AssignedAssignments", fields: [targetStudentId], references: [id])
  teacher             Teacher              @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  resources           AssignmentResource[]
  submissions         Submission[]
}

model Submission {
  id               Int        @id @default(autoincrement())
  studentId        Int
  assignmentId     Int
  content          String?
  fileUrl          String?
  fileName         String?
  fileSize         Int?
  submittedAt      DateTime   @default(now())
  updatedAt        DateTime   @default(now()) @updatedAt
  grade            Int?
  feedback         String?
  status           String     @default("submitted")
  submissionNumber Int        @default(1)
  assignment       Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student          Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, assignmentId])
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  studentId Int
  program   String
  subject   String
  startDate DateTime @default(now())
  isActive  Boolean  @default(true)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, program, subject])
}

model Resource {
  id                 Int                  @id @default(autoincrement())
  title              String
  description        String?
  type               String
  fileUrl            String?
  linkUrl            String?
  fileName           String?
  fileSize           Int?
  program            String
  subject            String
  grade              String
  teacherId          Int
  isPublic           Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  assignmentLinks    AssignmentResource[]
  teacher            Teacher              @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  studentAssignments StudentResource[]
}

model AssignmentResource {
  id           Int        @id @default(autoincrement())
  assignmentId Int
  resourceId   Int
  isRequired   Boolean    @default(false)
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  resource     Resource   @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, resourceId])
}

model StudentResource {
  id         Int       @id @default(autoincrement())
  studentId  Int
  resourceId Int
  assignedAt DateTime  @default(now())
  viewedAt   DateTime?
  resource   Resource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  student    Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, resourceId])
}

model StudentSubmission {
  id             Int                       @id @default(autoincrement())
  studentId      Int
  title          String
  description    String?
  content        String?
  fileUrl        String?
  fileName       String?
  fileSize       Int?
  submittedAt    DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  teacherIds     Int[]
  student        Student                   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacherRemarks StudentSubmissionRemark[]
}

model StudentSubmissionRemark {
  id                  Int               @id @default(autoincrement())
  studentSubmissionId Int
  teacherId           Int
  remark              String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  studentSubmission   StudentSubmission @relation(fields: [studentSubmissionId], references: [id], onDelete: Cascade)
  teacher             Teacher           @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([studentSubmissionId, teacherId])
}

model Message {
  id            String   @id @default(uuid())
  senderId      Int
  senderRole    String // 'teacher' or 'student'
  recipientId   Int
  recipientRole String // 'teacher' or 'student'
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isRead        Boolean  @default(false)
  
  // Relations (we can use dynamic references)
  sender    User @relation("MessageSender", fields: [senderId], references: [id])
  recipient User @relation("MessageRecipient", fields: [recipientId], references: [id])
}

// Virtual User model for message relations
model User {
  id                 Int       @id
  name               String
  role               String    // 'teacher' or 'student'
  sentMessages       Message[] @relation("MessageSender")
  receivedMessages   Message[] @relation("MessageRecipient")
  
  @@map("users_view")
}

model ClassSchedule {
  id          Int       @id @default(autoincrement())
  title       String
  date        DateTime?
  startTime   String
  endTime     String
  subject     String
  description String?
  location    String?
  meetingLink String?
  status      String?
  color       String?
  studentId   Int
  teacherId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([teacherId])
  @@index([studentId])
}
